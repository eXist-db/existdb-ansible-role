---
## tasks for post installation that need exist running

- name: Ensure exist service is running
  service:
    name: "{{ exist_instname }}"
    enabled: yes
    state: restarted
    #daemon-reload: true
  tags:
    - config
    - runtime-config

# we need to wait until eXist becomes ready.  starting eXist from the
# wrapper will return quickly, so this playbook moves on.  But eXist may
# still be busy with autodeploy installation, so the following tasks might
# fail.  Explicitly wait until eXist port becomes ready.

- name: Wait for eXist HTTP port to become ready
  wait_for:
    host: "{{ exist_http_host | default('localhost') }}"
    port: "{{ exist_http_port }}"
    timeout: "{{ exist_startup_timeout }}"
  when: exist_http_port > 0
  tags:
    - config
    - runtime-config

- name: Wait for eXist SSL port to become ready
  wait_for:
    host: "{{ exist_ssl_host | default('localhost') }}"
    port: "{{ exist_ssl_port }}"
    timeout: "{{ exist_startup_timeout }}"
  when: exist_http_port == 0
  tags:
    - config
    - runtime-config

# if .password-set file is present, register password_set_file var,
# so we can check whether the password was already set
- name: Check whether password has already been set
  stat:
    path: "{{ exist_datadir }}/.password-set"
  register: password_set_file
  tags:
    - config
    - runtime-config

# set-adminpass.xql may contain sensitive information, so gets installed
# with root access only, and gets removed afterwards
- name: Prepare set-adminpass XQuery script
  template:
    src: set-adminpass.xql.j2
    dest: "{{ exist_path }}/set-adminpass.xql"
    owner: root
    mode: 0600
  when: not password_set_file.stat.exists
  tags:
    - config
    - runtime-config

- name: Set admin password (exec set-adminpass.xql)
  #shell: 'bin/client.sh -u admin -P "" -F set-adminpass.xql && touch {{ exist_datadir }}/.password-set'
  shell: 'contrib/execute-xmlrpc.pl -u admin -p "" -P {{ exist_http_port }} -T < "{{ exist_path }}/set-adminpass.xql" && touch "{{ exist_datadir }}/.password-set"'
  args:
    chdir: "{{ exist_path }}"
  when: not password_set_file.stat.exists
  tags:
    - config
    - runtime-config

- name: Prepare install-xars.xql.j2 from template (custom xar installation)
  template:
    src: install-xars.xql.j2
    dest: "{{ exist_path }}/contrib/install-xars.xql"
    owner: "{{ exist_instuser }}"
    group: "{{ exist_group }}"
    mode: 0755
  when:
    - exist_custom_install|bool
    - exist_custom_xarlist|bool
  tags:
    - xar-install

- name: Install custom xar files (exec install-xars.xql)
  #shell: 'bin/client.sh -u admin -P "{{ exist_adminpass[inventory_hostname][exist_instname] }}" -F contrib/install-xars.xql -ouri=xmldb:exist://localhost:{{ exist_http_port }}/exist/xmlrpc'
  shell: 'contrib/execute-xmlrpc.pl -u admin -p "{{ exist_adminpass[inventory_hostname][exist_instname] }}" -P {{ exist_http_port }} -t 4800 -T < contrib/install-xars.xql'
  args:
    chdir: "{{ exist_path }}"
  when:
    - exist_custom_install|bool
    - exist_custom_xarlist|bool
  tags:
    - xar-install

# users-and-groups.xql may contain sensitive information, so gets installed
# with root access only, and gets removed afterwards
- name: Prepare hardening XQuery script users-and-groups.xql
  template:
    src: users-and-groups.xql.j2
    dest: "{{ exist_path }}/users-and-groups.xql"
    owner: root
    mode: 0600
  tags:
    - config
    - runtime-config

- name: Run post-install/hardening (exec users-and-groups.xql)
  #shell: 'bin/client.sh -u admin -P "{{ exist_adminpass[inventory_hostname][exist_instname] }}" -p {{ exist_http_port }} -F users-and-groups.xql'
  shell: 'contrib/execute-xmlrpc.pl -u admin -p "{{ exist_adminpass[inventory_hostname][exist_instname] }}" -P {{ exist_http_port }} -T < "{{ exist_path }}/users-and-groups.xql"'
  args:
    chdir: "{{ exist_path }}"
  tags:
    - config
    - runtime-config

- name: Ensure post-install scripts are absent after install
  file:
    path: "{{ exist_path }}/{{ item }}"
    state: absent
  with_items:
    - set-adminpass.xql
    - users-and-groups.xql
    - install-xars.xql
  tags:
    - config
    - runtime-config
